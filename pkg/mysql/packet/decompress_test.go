package packet_test

import (
	"bytes"
	"io"
	"testing"

	"github.com/colinnewell/pcap2mysql-log/pkg/mysql/packet"
	"github.com/google/go-cmp/cmp"
)

func TestNoCompression(t *testing.T) {
	expected := []byte{
		0x09, 0x00, 0x00, 0x00, 0x03, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x20, 0x31, // -- 0xSE,LECT 1
	}

	input := []byte{
		0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x03, 0x53, 0x45, 0x4c, 0x45, // ............SELE
		0x43, 0x54, 0x20, 0x31, // 0xCT, 1
	}

	var b bytes.Buffer
	d := packet.MySQLPacketDecompressor{Receiver: &b}
	if _, err := d.Write(input); err != nil {
		t.Fatal(err)
	}

	if diff := cmp.Diff(b.Bytes(), expected); diff != "" {
		t.Fatalf("Decompressed version doesn't match (-got +expected):\n%s\n", diff)
	}
}

func TestOnePacketExample(t *testing.T) {
	expected := []byte{
		0x2e, 0x00, 0x00, 0x00, 0x03, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x22, 0x30, 0x31, 0x32, // .....select "012
		0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, // 3456789012345678
		0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, // 9012345678901234
		0x35, 0x22, // 5"
	}

	input := []byte{
		0x22, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x78, 0x9c, 0xd3, 0x63, 0x60, 0x60, 0x60, 0x2e, 0x4e, // "...2..x..c```.N
		0xcd, 0x49, 0x4d, 0x2e, 0x51, 0x50, 0x32, 0x30, 0x34, 0x32, 0x36, 0x31, 0x35, 0x33, 0xb7, 0xb0, // .IM.QP20426153..
		0xc4, 0xcd, 0x52, 0x02, 0x00, 0x0c, 0xd1, 0x0a, 0x6c, // ..R.....l
	}

	var b bytes.Buffer
	d := packet.MySQLPacketDecompressor{Receiver: &b}
	if _, err := d.Write(input); err != nil && err != io.EOF {
		t.Fatal(err)
	}

	if diff := cmp.Diff(b.Bytes(), expected); diff != "" {
		t.Fatalf("Decompressed version doesn't match (-got +expected):\n%s\n", diff)
	}
}

func TestMultiplePacketsDecompress(t *testing.T) {
	expected := [][]byte{
		{0x01, 0x00, 0x00, 0x01, 0x01},
		{
			0x25, 0x0, 0x0, 0x2, 0x3, 0x64, 0x65, 0x66, 0x0, 0x0, 0x0,
			0xf, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x28, 0x22, 0x61,
			0x22, 0x2c, 0x20, 0x35, 0x30, 0x29, 0x0, 0xc, 0x8, 0x0,
			0x32, 0x0, 0x0, 0x0, 0xfd, 0x1, 0x0, 0x1f, 0x0, 0x0,
		},
		{0x05, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x02, 0x00},
		{
			0x33, 0x0, 0x0, 0x4, 0x32, 0x61, 0x61, 0x61, 0x61, 0x61,
			0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
			0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
			0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
			0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
			0x61, 0x61, 0x61, 0x61, 0x61,
		},
		{0x05, 0x00, 0x00, 0x05, 0xfe, 0x00, 0x00, 0x02, 0x00},
	}

	input := []byte{
		0x4a, 0x00, 0x00, 0x01, 0x77, 0x00, 0x00, 0x78, 0x9c, 0x63, 0x64, 0x60, 0x60, 0x64, 0x54, 0x65, // J...w..x.cd``dTe
		0x60, 0x60, 0x62, 0x4e, 0x49, 0x4d, 0x63, 0x60, 0x60, 0xe0, 0x2f, 0x4a, 0x2d, 0x48, 0x4d, 0x2c, // ``bNIMc``./J-HM,
		0xd1, 0x50, 0x4a, 0x54, 0xd2, 0x51, 0x30, 0x35, 0xd0, 0x64, 0xe0, 0xe1, 0x60, 0x30, 0x02, 0x8a, // .PJT.Q05.d..`0..
		0xff, 0x65, 0x64, 0x90, 0x67, 0x60, 0x60, 0x65, 0x60, 0x60, 0xfe, 0x07, 0x54, 0xcc, 0x60, 0xcc, // .ed.g``e``..T.`.
		0xc0, 0xc0, 0x62, 0x94, 0x48, 0x32, 0x00, 0xea, 0x67, 0x05, 0xeb, 0x07, 0x00, 0x8d, 0xf9, 0x1c, // ..b.H2..g.......
		0x64, // d
	}

	s := splitter{}
	d := packet.MySQLPacketDecompressor{Receiver: &s}
	if _, err := d.Write(input); err != nil && err != io.EOF {
		t.Fatal(err)
	}

	if diff := cmp.Diff(s.packets, expected); diff != "" {
		t.Fatalf("Decompressed version doesn't match (-got +expected):\n%s\n", diff)
	}
}

func TestMultiplePacketsDecompressBug(t *testing.T) {
	expected := [][]byte{}

	input := []byte{
		0xa1, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x78,
		0x9c, 0xed, 0xd0, 0xcd, 0x6a, 0x23, 0x31, 0x0c,
		0x07, 0xf0, 0x85, 0x1e, 0x96, 0xf4, 0x29, 0x7c,
		0x4b, 0x0b, 0x25, 0xb0, 0x1f, 0x2f, 0x50, 0x4a,
		0x0e, 0x81, 0x36, 0x85, 0xa6, 0xdb, 0xd3, 0x82,
		0x51, 0xc7, 0x4a, 0x23, 0xc6, 0xb6, 0xa6, 0x96,
		0x1d, 0xfa, 0x24, 0xfb, 0xbc, 0x2b, 0xcf, 0x50,
		0xd8, 0x37, 0xd8, 0x8b, 0x20, 0x88, 0x78, 0xf4,
		0xf3, 0xdf, 0xb2, 0xff, 0x7c, 0xbd, 0xf8, 0x72,
		0xb1, 0xdb, 0x1f, 0xb6, 0x4f, 0xcf, 0x6e, 0xb7,
		0x7f, 0x7e, 0x74, 0x01, 0x13, 0x6f, 0x22, 0x57,
		0xb9, 0x5c, 0xad, 0xae, 0xf6, 0xf8, 0xde, 0xd0,
		0x57, 0x4c, 0x13, 0x17, 0xf4, 0x28, 0xd5, 0xe3,
		0xc7, 0x84, 0x81, 0x2a, 0x78, 0x4e, 0xf9, 0x46,
		0x89, 0xdb, 0x66, 0x4a, 0xbe, 0x60, 0xf2, 0x03,
		0x67, 0x51, 0xde, 0x72, 0x6d, 0xc5, 0xd3, 0x24,
		0x2d, 0xf9, 0x0c, 0x33, 0x39, 0x50, 0xa2, 0x48,
		0x3d, 0x09, 0xab, 0x4f, 0x1c, 0x35, 0x87, 0x40,
		0xf4, 0x5f, 0x20, 0x2f, 0xb4, 0xa4, 0x44, 0x7a,
		0xc3, 0xdc, 0xd7, 0x18, 0xfc, 0x14, 0x61, 0x40,
		0xa8, 0x3e, 0xd3, 0x89, 0xa2, 0x3f, 0x73, 0x9c,
		0xc9, 0x0b, 0xc7, 0x36, 0x55, 0xa8, 0x9a, 0x3b,
		0xb1, 0x08, 0xa5, 0x26, 0xba, 0x3b, 0x57, 0x7f,
		0xc6, 0x4c, 0xcb, 0x41, 0xbb, 0x3c, 0x50, 0xd0,
		0x01, 0x7c, 0xc0, 0xa8, 0x1f, 0xab, 0xc6, 0xf5,
		0x15, 0x82, 0x0e, 0x58, 0xda, 0x4c, 0xee, 0xe1,
		0xb5, 0x5f, 0x25, 0x90, 0xce, 0x90, 0x87, 0x4a,
		0xec, 0x07, 0x0d, 0x3c, 0x63, 0xe1, 0x3e, 0xd9,
		0x4c, 0x6e, 0x5b, 0xd5, 0x7d, 0x32, 0xd0, 0x44,
		0xff, 0xcc, 0xf0, 0x79, 0xf6, 0x4c, 0xee, 0xb8,
		0xe8, 0x8b, 0x90, 0xf4, 0x0b, 0x1d, 0x75, 0x58,
		0x4d, 0xfc, 0x24, 0x98, 0x66, 0xf1, 0x40, 0xb9,
		0xcf, 0xd7, 0x8f, 0xd7, 0xb8, 0x82, 0x53, 0x0b,
		0x04, 0x39, 0x00, 0x2e, 0x2f, 0xa2, 0xb7, 0x0c,
		0x1c, 0xb9, 0xcc, 0x6f, 0xaa, 0xdd, 0x82, 0x27,
		0xbd, 0x3e, 0x16, 0x3d, 0x11, 0xfc, 0xf5, 0xe5,
		0xea, 0xe5, 0xf6, 0xfe, 0xd7, 0xf6, 0xe0, 0xae,
		0xdc, 0xfa, 0xc8, 0xbc, 0xbe, 0x71, 0xeb, 0x6f,
		0xbd, 0x7c, 0xef, 0xe5, 0x47, 0x2f, 0x3f, 0x7b,
		0x19, 0x25, 0xc5, 0x31, 0x05, 0x81, 0x98, 0x42,
		0x14, 0xd0, 0x92, 0x7a, 0x95, 0x31, 0x41, 0x70,
		0x51, 0xbb, 0x02, 0x63, 0x48, 0xe0, 0xa4, 0x2b,
		0x37, 0x0b, 0x6d, 0x45, 0x71, 0x01, 0xfa, 0x76,
		0x5d, 0xe9, 0xa7, 0x31, 0x88, 0x36, 0x17, 0x2a,
		0x23, 0x24, 0xa7, 0x79, 0xbd, 0x5b, 0x4f, 0x24,
		0x4e, 0x7f, 0x90, 0xb9, 0x9e, 0xb0, 0xb8, 0xc8,
		0xf9, 0xcd, 0x45, 0xca, 0xe8, 0xf8, 0xe8, 0x2a,
		0x7e, 0xd4, 0x65, 0xb1, 0xd9, 0x6c, 0x7e, 0x67,
		0xb3, 0x66, 0xcd, 0x9a, 0x35, 0x6b, 0xd6, 0xac,
		0x59, 0xb3, 0x66, 0xcd, 0x9a, 0x35, 0x6b, 0xd6,
		0xac, 0x59, 0xb3, 0x66, 0xcd, 0x9a, 0x35, 0x6b,
		0xd6, 0xac, 0x59, 0xb3, 0x66, 0xcd, 0x9a, 0x35,
		0xfb, 0xdf, 0xed, 0x5f, 0x3b, 0x95, 0x3c, 0x74,

		0x84, 0x02, 0x00, 0x01, 0x9a, 0xe7, 0x02,

		0x78,
		0x9c, 0xed, 0xce, 0x31, 0x0a, 0x02, 0x31, 0x14,
		0x45, 0xd1, 0xde, 0x55, 0xfc, 0xee, 0x23, 0x84,
		0x94, 0xae, 0xc6, 0xc6, 0x22, 0x3a, 0x03, 0x43,
		0x02, 0x9a, 0xc2, 0xe5, 0x2b, 0xb8, 0x85, 0x29,
		0x06, 0x3c, 0xf0, 0x9a, 0x07, 0xa7, 0xb8, 0x7d,
		0x2e, 0xeb, 0x2b, 0xbe, 0xbb, 0xf5, 0x31, 0x97,
		0xf6, 0x8c, 0x6d, 0xf4, 0x47, 0x6c, 0x6b, 0x6f,
		0x31, 0xee, 0x31, 0xdb, 0x7b, 0xfe, 0x4e, 0xad,
		0xf5, 0xda, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0xd9, 0xff, 0xb5, 0x59, 0x22, 0x8f,
		0xd0, 0xc1, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb,
		0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c,
		0xcb, 0xb2, 0x2c, 0xcb, 0xb2, 0x2c, 0xcb, 0xb2,
		0xec, 0xbe, 0x36, 0x4b, 0xe4, 0x11, 0x3a, 0x58,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59,
		0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0x65,
		0x59, 0x96, 0x65, 0x59, 0x96, 0x65, 0x59, 0x96,
		0x65, 0x59, 0x96, 0x65, 0x59, 0x96, 0xdd, 0xd7,
		0x66, 0x89, 0xbc, 0x64, 0x9c, 0x4f, 0x1f, 0xd5,
		0x6d, 0x23, 0x8a,

		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // ........
		0x00, 0x00, 0x00, 0x03, 0x53, 0x45, 0x4c, 0x45, // ....SELE
		0x43, 0x54, 0x20, 0x2a, 0x20, 0x46, 0x52, 0x4f, // CT * FRO
		0x4d, 0x20, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x6c, // M demo.l
		0x6f, 0x74, 0x73, // ots

		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ........
		0x00, 0x00, 0x00, 0x01, // ....
	}

	s := splitter{}
	d := packet.MySQLPacketDecompressor{Receiver: &s}
	if _, err := d.Write(input); err != nil && err != io.EOF {
		t.Logf("%#v\n", s.packets)
		t.Fatal(err)
	}

	if diff := cmp.Diff(s.packets, expected); diff != "" {
		t.Fatalf("Decompressed version doesn't match (-got +expected):\n%s\n", diff)
	}

}
